## load Xming 
## load R in Ubuntu

library("spatstat")
library(gtools)
library(MASS)
library(ggplot2)
library(viridis)

theme_set(theme_bw(base_size = 16))

sigma = 3
sigma1 = 1
sigma5 = 1
sigma8 = 3
sigma10 = 5
xlim = 200
zlim = 10
voxel_size = 0.02
Scale = 1/(voxel_size)
center = xlim/Scale/2

dmin = 2.7
dmax = dmin+1
x1r=0.8
x2r=4.5
denscrit=900

ldf <- list() # creates a list
listcsv <- dir(pattern = "*.csv") # creates the list of all the csv files in the directory
listcsv <- mixedsort(sort(listcsv)) 

CM <- matrix(0, nrow = 200, ncol = 3)
CM_VAR <- matrix(0, nrow = 200, ncol = 3)

for (k in seq(from=3140, to=3140, by=1)){
 ldf[[k]] <- read.csv(listcsv[k])   
	data2 <- ldf[[k]]

dx2 <- rep(0, 16384)
dy2 <- rep(0, 16384)
dz2 <- rep(0, 16384)
dist_source <- rep(0, 16384)
angle_source <- rep(0, 16384)

CCa <- data2[data2[,"Type"]==1,]
for (i in 1:18){
	if (i==1){
	CC2a <- CCa[CCa[,"z"]==0,]
	}
	else{
	CC2pa <- CCa[CCa[,"z"]==i,]
	CC2a <- rbind(CC2a,CC2pa)
	}
}

sum_cx = 0
sum_cy = 0
sum_cz = 0
sum_cc = 0
sumvar_cx = 0
sumvar_cy = 0
sumvar_cz = 0

i = 0
while (i<sum(CCa[,4])){
	i = i + 1
	sum_cx = CCa[i,4]*CCa[i,1]+sum_cx
	sum_cy = CCa[i,4]*CCa[i,2]+sum_cy
	sum_cz = CCa[i,4]*CCa[i,3]+sum_cz
	sum_cc = CCa[i,4]+sum_cc
}

CM[(k-1)/64+1,1] = sum_cx/sum(CCa[,4])
CM[(k-1)/64+1,2] = sum_cy/sum(CCa[,4])
CM[(k-1)/64+1,3] = sum_cz/sum(CCa[,4])



j = 0
while (j<sum(CCa[,4])){
 	j = j + 1
	sumvar_cx = (CCa[j,1]-CM[(k-1)/64+1,1])^2 + sumvar_cx
	sumvar_cy = (CCa[j,2]-CM[(k-1)/64+1,2])^2 + sumvar_cy
	sumvar_cz = (CCa[j,3]-CM[(k-1)/64+1,3])^2 + sumvar_cz
}
CM_VAR[(k-1)/64+1,1] = sqrt(sumvar_cx/sum(CCa[,4]))
CM_VAR[(k-1)/64+1,2] = sqrt(sumvar_cy/sum(CCa[,4]))
CM_VAR[(k-1)/64+1,3] = sqrt(sumvar_cz/sum(CCa[,4]))


CCst2 <- data2[data2[,"Type"]==1,]
CCst <- CCst2[CCst2[,"State"]==6,]
for (i in 1:18){
	if (i==1){
	CC2st <- CCst[CCst[,"z"]==0,]
	}
	else{
	CC2pst <- CCst[CCst[,"z"]==i,]
	CC2st <- rbind(CC2st,CC2pst)
	}
}

CCP2 <- data2[data2[,"Type"]==1,]
CCP <- CCP2[CCP2[,"State"]==7,]
for (i in 1:18){
	if (i==1){
	CC2P <- CCP[CCP[,"z"]==0,]
	}
	else{
	CC2pP <- CCP[CCP[,"z"]==i,]
	CC2P <- rbind(CC2P,CC2pP)
	}
}

CCse2 <- data2[data2[,"Type"]==1,]
CCse <- CCse2[CCse2[,"State"]==8,]
for (i in 1:18){
	if (i==1){
	CC2se <- CCse[CCse[,"z"]==0,]
	}
	else{
	CC2pse <- CCse[CCse[,"z"]==i,]
	CC2se <- rbind(CC2se,CC2pse)
	}
}

CCb <- data2[data2[,"Type"]==2,]
for (i in 1:18){
	if (i==1){
	CC2b <- CCb[CCb[,"z"]==0,]
	}
	else{
	CC2pb <- CCb[CCb[,"z"]==i,]
	CC2b <- rbind(CC2b,CC2pb)
	}
}

CCeff2 <- data2[data2[,"Type"]==2,]
CCeff <- CCeff2[CCeff2[,"State"]==3,]
for (i in 1:18){
	if (i==1){
	CC2eff <- CCeff[CCeff[,"z"]==0,]
	}
	else{
	CC2peff <- CCeff[CCeff[,"z"]==i,]
	CC2eff <- rbind(CC2eff,CC2peff)
	}
}

CCsup2 <- data2[data2[,"Type"]==2,]
CCsup <- CCsup2[CCsup2[,"State"]==5,]
for (i in 1:18){
	if (i==1){
	CC2sup <- CCsup[CCsup[,"z"]==0,]
	}
	else{
	CC2psup <- CCsup[CCsup[,"z"]==i,]
	CC2sup <- rbind(CC2sup,CC2psup)
	}
}

CCcyt2 <- data2[data2[,"Type"]==2,]
CCcyt <- CCcyt2[CCcyt2[,"State"]==4,]
for (i in 1:18){
	if (i==1){
	CC2cyt <- CCcyt[CCcyt[,"z"]==0,]
	}
	else{
	CC2pcyt <- CCcyt[CCcyt[,"z"]==i,]
	CC2cyt <- rbind(CC2cyt,CC2pcyt)
	}
}

CCreg <- data2[data2[,"Type"]==3,]
for (i in 1:18){
	if (i==1){
	CC2reg2 <- CCreg[CCreg[,"z"]==0,]
	}
	else{
	CC2preg <- CCreg[CCreg[,"z"]==i,]
	CC2reg2 <- rbind(CC2reg2,CC2preg)
	}
}

MDSC <- data2[data2[,"Type"]==4,]
for (i in 1:18){
	if (i==1){
	MDSC2 <- MDSC[MDSC[,"z"]==0,]
	}
	else{
	MDSCp <- MDSC[MDSC[,"z"]==i,]
	MDSC2 <- rbind(MDSC2,MDSCp)
	}
}


yyst<-CC2st$y
xxst<-CC2st$x
CC3st <- ppp(xxst,yyst,c(0,(xlim-1)),c(0,(xlim-1)))
CC_densityst <- density(CC3st,sigma)
CCELLst <- rescale(CC_densityst,Scale)
C_CELLst <- CCELLst/(voxel_size^2)

yyP<-CC2P$y
xxP<-CC2P$x
CC3P <- ppp(xxP,yyP,c(0,(xlim-1)),c(0,(xlim-1)))
CC_densityP <- density(CC3P,sigma)
CCELLP <- rescale(CC_densityP,Scale)
C_CELLP <- CCELLP/(voxel_size^2)

yyse<-CC2se$y
xxse<-CC2se$x
CC3se <- ppp(xxse,yyse,c(0,(xlim-1)),c(0,(xlim-1)))
CC_densityse <- density(CC3se,sigma)
CCELLse <- rescale(CC_densityse,Scale)
C_CELLse <- CCELLse/(voxel_size^2)

yya<-CC2a$y
xxa<-CC2a$x
CC3a <- ppp(xxa,yya,c(0,(xlim-1)),c(0,(xlim-1)))
CC_densitya1 <- density(CC3a,sigma1)
CCELLa1 <- rescale(CC_densitya1,Scale)
C_CELLa1 <- CCELLa1/(voxel_size^2)

CC_densitya5 <- density(CC3a,sigma5)
CCELLa5 <- rescale(CC_densitya5,Scale)
C_CELLa5 <- CCELLa5/(voxel_size^2)

CC_densitya8 <- density(CC3a,sigma8)
CCELLa8 <- rescale(CC_densitya8,Scale)
C_CELLa8 <- CCELLa8/(voxel_size^2)

CC_densitya10 <- density(CC3a,sigma10)
CCELLa10 <- rescale(CC_densitya10,Scale)
C_CELLa10 <- CCELLa10/(voxel_size^2)

CC_densitya <- density(CC3a,sigma)
CCELLa <- rescale(CC_densitya,Scale)
C_CELLa <- CCELLa/(voxel_size^2)

for (i in 1:128){
	for (j in 1:128){
		if (C_CELLa1[i,j] < 1000){
			C_CELLa[i,j] = C_CELLa1[i,j]
		}
		else if(C_CELLa1[i,j] >= 1000 && C_CELLa1[i,j] < 2500){
			C_CELLa[i,j] = C_CELLa5[i,j]
		}		
		else{
			C_CELLa[i,j] = C_CELLa10[i,j]
		}
	}
}

yy<-CC2b$y
xx<-CC2b$x
CC3b <- ppp(xx,yy,c(0,(xlim-1)),c(0,(xlim-1)))
CC_densityb <- density(CC3b,sigma)
CCELLb <- rescale(CC_densityb,Scale)
C_CELLb <- CCELLb/(voxel_size^2/6)

yycyt<-CC2cyt$y
xxcyt<-CC2cyt$x
CC3cyt <- ppp(xxcyt,yycyt,c(0,(xlim-1)),c(0,(xlim-1)))
CC_densitycyt <- density(CC3cyt,sigma)
CCELLcyt <- rescale(CC_densitycyt,Scale)
C_CELLcyt <- CCELLcyt/(voxel_size^2/6)

yysup<-CC2sup$y
xxsup<-CC2sup$x
CC3sup <- ppp(xxsup,yysup,c(0,(xlim-1)),c(0,(xlim-1)))
CC_densitysup <- density(CC3sup,sigma)
CCELLsup <- rescale(CC_densitysup,Scale)
C_CELLsup <- CCELLsup/(voxel_size^2/6)

yyeff<-CC2eff$y
xxeff<-CC2eff$x
CC3eff <- ppp(xxeff,yyeff,c(0,(xlim-1)),c(0,(xlim-1)))
CC_densityeff <- density(CC3eff,sigma)
CCELLeff <- rescale(CC_densityeff,Scale)
C_CELLeff <- CCELLeff/(voxel_size^2/6)

yyreg<-CC2reg2$y
xxreg<-CC2reg2$x
CC3reg <- ppp(xxreg,yyreg,c(0,(xlim-1)),c(0,(xlim-1)))
CC_densityreg <- density(CC3reg,sigma)
CCELLreg <- rescale(CC_densityreg,Scale)
C_CELLreg <- CCELLreg/(voxel_size^2/6)

yymdsc<-MDSC2$y
xxmdsc<-MDSC2$x
MDSC3 <- ppp(xxmdsc,yymdsc,c(0,(xlim-1)),c(0,(xlim-1)))
CC_densitymdsc <- density(MDSC3,sigma)
CCELLmdsc <- rescale(CC_densitymdsc,Scale)
C_CELLmdsc <- CCELLmdsc/(voxel_size^2)

get_density <- function(x, y, ...) {
   dens <- MASS::kde2d(x, y, ...)
   ix <- findInterval(x, dens$x)
   iy <- findInterval(y, dens$y)
   ii <- cbind(ix, iy)
   return(dens$z[ii])
 }

for (m in seq(from=1, to=9, by=4)){

if (m==1){
	CDCancer <- data.frame(C_CELLa)
    CD <- data.frame(C_CELLa)
    CELL_TYPE = "CANCER CELL"
	yymax <- 60000
	yymaxB <- 60000
	F = 1

ymaxCC = 10000
CC2a$x <- CC2a$x*0.02
CC2a$y <- CC2a$y*0.02
CCT <- data.frame(CC2a$x,CC2a$y)
Densitycc <- get_density(CC2a$x, CC2a$y, n = 1)
Density2 <- ymaxCC/max(Densitycc)*Densitycc
ggplot(CCT) + geom_point(aes(CC2a.x, CC2a.y, colour = Density2), shape=21, fill="darkblue", color="black") + coord_fixed() + labs(colour = 'Density,'~mm^2) + 
#theme(legend.title = element_text(size=14), legend.text = element_text(size=14),panel.background = element_rect(fill = 'black', colour = 'black')) +
theme(plot.title = element_text(hjust = 0.5), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.title = element_blank()) +
#scale_fill_continuous(limits = c(0,ymaxCC), breaks = c(0, 2000, 4000, 6000, 8000, 10000), guide = guide_colourbar(nbin=100, draw.ulim = FALSE, draw.llim = FALSE)) + 
#scale_colour_gradient(low = "blue", high = "dark blue", na.value = NA) +
##scale_colour_gradientn(colours = inferno(10)) +
##ggplot(CCT) + geom_point(aes(CC2a.x, CC2a.y)) + labs(colour = 'Density,'~mm^2) + scale_fill_continuous(limits = c(0,2500), breaks = c(0, 500, 1000, 1500, 2000, 2500),
  labs(
    title = "Cancer cell density",
    x = 'x,'~mm,
    y = 'y,'~mm
  ) +
  xlim(0, 4) + ylim(0, 4)
ggsave(paste0("CCT", k, sep=".", "png"))	
}
else if (m==2){
	CD <- data.frame(C_CELLst)
    CELL_TYPE = "CCst"
	ymax <- 12000
	F = 1
}
else if (m==3){
	CD <- data.frame(C_CELLP)
    CELL_TYPE = "CCp"
	ymax <- 12000
}
else if (m==4){
	CD <- data.frame(C_CELLse)
    CELL_TYPE = "CCse"
	ymax <- 12000
}
else if (m==5){
	CD <- data.frame(C_CELLb)
    CELL_TYPE = "CD8+ T CELL"
	yymax <- 2500
	yymaxB <- 2500
	F = 1

if (k>1500){
ymaxTcell <- 3000	
CC2b$x <- CC2b$x*0.02
CC2b$y <- CC2b$y*0.02
CD8T <- data.frame(CC2b$x,CC2b$y)
Densitycd8 <- get_density(CC2b$x, CC2b$y, n = 1)
Density3 <- ymaxTcell/max(Densitycd8)*Densitycd8
ggplot(CD8T) + geom_point(aes(CC2b.x, CC2b.y, colour = Density3), shape=21, fill="red", color="black") + coord_fixed() + labs(colour = 'Density,'~mm^2) + 
theme(legend.title = element_text(size=14), legend.text = element_text(size=14)) +
#scale_fill_continuous(limits = c(0,ymaxTcell), breaks = c(0, 1500, 3000, 4500, 6000), guide = guide_colourbar(nbin=100, draw.ulim = FALSE, draw.llim = FALSE)) +
#scale_colour_gradient(low = "orange", high = "red", na.value = NA) +
##ggplot(CD8T) + geom_point(aes(CC2b.x, CC2b.y)) + labs(colour = 'Density,'~mm^2) +
  labs(
    title = "CD8+ T CELL",
    x = 'x,'~mm,
    y = 'y,'~mm
  ) +
  xlim(0, 4) + ylim(0, 4)
ggsave(paste0("CD8T", k, sep=".", "png"))

}
}
else if (m==6){
	CD <- data.frame(C_CELLeff)
    CELL_TYPE = "Teff"
	ymax <- 6000
}
else if (m==7){
	CD <- data.frame(C_CELLcyt)
    CELL_TYPE = "Tcyt"
	ymax <- 6000
}
else if (m==8){
	CD <- data.frame(C_CELLsup)
    CELL_TYPE = "Tsup"
	ymax <- 6000
}
else if (m==9){
	CD <- data.frame(C_CELLreg)
    CELL_TYPE = "FOXP3+ T CELL"
	yymax <- 200
	yymaxB <- 200

if (k>1500){	
	ymax <- 1000
ymaxTreg <- 1000	
CC2reg2$x <- CC2reg2$x*0.02
CC2reg2$y <- CC2reg2$y*0.02
REG <- data.frame(CC2reg2$x,CC2reg2$y)
Densityreg <- get_density(CC2reg2$x, CC2reg2$y, n = 100)
Density4 <- ymaxTreg/max(Densityreg)*Densityreg
ggplot(REG) + geom_point(aes(CC2reg2.x, CC2reg2.y, colour = Density4)) + coord_fixed() + labs(colour = 'Density,'~mm^2) + 
theme(legend.title = element_text(size=14), legend.text = element_text(size=14)) +
scale_fill_continuous(limits = c(0,ymaxTreg), breaks = c(0, 150, 300, 450, 600), guide = guide_colourbar(nbin=100, draw.ulim = FALSE, draw.llim = FALSE)) +
scale_colour_gradient(low = "light green", high = "dark green", na.value = NA) +
  labs(
    title = "FoxP3+ Tcell density",
    x = 'x,'~mm,
    y = 'y,'~mm
  ) +
  xlim(0, 4) + ylim(0, 4)
ggsave(paste0("REG", k, sep=".", "png"))
}

}
else if (m==10){
	CD <- data.frame(C_CELLmdsc)
    CELL_TYPE = "MDSC"
	ymax <- 60
}



### 3d plots ###

for (j in 1:16384){

		#if (CD[j,1]>=center && CD[j,2]>=center){
		#	CD[j,3]=0
		#}

DIM = dim(CCa)

	dx2[j] = (CD[j,1])^2
	dy2[j] = (CD[j,2])^2
	#dz2[j] = (CD[j,3])^2
	dist_source[j] = (dx2[j] + dy2[j])^(1/2);
	if ((dx2[j]==0) && (CDCancer[j,3]<=denscrit) && (CDCancer[j,3]>1e-10)){
		angle_source[j] = 90;
	}
	else if((dx2[j]!=0) && (CDCancer[j,3]<=denscrit) && (CDCancer[j,3]>1e-10)){
		angle_source[j] = atan(dy2[j]/dx2[j])*180/pi;
	}
	else{
		angle_source[j] = 0;
	}		
	

if ((m==5) || (m==9)){
if (CDCancer[j,3]>denscrit){ 
    CD[j,4]="CT"
}	  
else if ((CDCancer[j,3]<=denscrit) && (CDCancer[j,3]>1e-10)){
	CD[j,4]="IF"
} 
else{ 
    CD[j,4]="N"
}
}  

}

write.csv(CD,paste0(CELL_TYPE, k,".csv"), row.names = FALSE)

### 2d plots (perpendicular to IF) ###

if (m==1){
CDCC <- matrix(0, nrow = 16384, ncol = 5) 
ordCC <- sort.int(CDCancer[,3], decreasing = TRUE, index.return = TRUE)  
CDCC[,1] <- CDCancer[ordCC$ix,1]
CDCC[,2] <- CDCancer[ordCC$ix,2]
CDCC[,5] = (CDCC[,1]^2 + CDCC[,2]^2)^(1/2)
CDCC[,3] <- ordCC$x
}
if ((m==1) || (m==5) || (m==9)){
CDCC[,4] <- CD[ordCC$ix,3]
}

angle_CD2 <- matrix(0, nrow = length(matrix(t(angle_source)[t(angle_source) != 0])), ncol = 2) 
angle_ord <- sort.int(matrix(t(angle_source)[t(angle_source) != 0]), decreasing = FALSE, index.return = TRUE) 
angle_CD2[,1] <- angle_ord$x
angle_CD2[,2] <- CD[angle_ord$ix,3]  
 
angle_H = hist(angle_CD2[,1],50);
angle_Hc = angle_H$counts
angle_CD2mean <- matrix(0, nrow = length(angle_Hc), ncol = 2)
angle_CD2sd <- matrix(0, nrow = length(angle_Hc), ncol = 2)
angle_CIi <- rep(0, length(angle_Hc))
angle_CIs <- rep(0, length(angle_Hc))
angle_count <- 0
angle_CD2mean[,1] <- angle_H$mids
angle_CD2sd[,1] <- angle_H$mids

for (l in seq(from=1, to=length(angle_Hc), by=1)){
    if (angle_Hc[l]==0){
    angle_CD2mean[l,2] = 0 
    angle_CD2sd[l,2] = 0  
    }
    else{
    angle_CD2mean[l,2] = sum(angle_CD2[(angle_count+1):(angle_count+angle_Hc[l]),2])/angle_Hc[l]  
        for (i in seq(from=angle_count+1, to=angle_count+angle_Hc[l], by=1)){
            angle_CD2sd[l,2] = (angle_CD2[i,2]-angle_CD2mean[l,2])^2+angle_CD2sd[l,2]
        }
	angle_CD2sd[l,2] = sqrt(angle_CD2sd[l,2]/angle_Hc[l])	
    angle_count <- angle_count + angle_Hc[l]  
    }
}

for (l in seq(from=1, to=length(angle_Hc), by=1)){
	if (angle_Hc[l]==0){
		angle_CIs[l] = 0;
		angle_CIi[l] = 0;
	}
	else if(angle_CD2mean[l,2] < 1.96*angle_CD2sd[l,2]/sqrt(angle_Hc[l])){
		angle_CIs[l] = 1.96*angle_CD2sd[l,2]/sqrt(angle_Hc[l]);
		angle_CIi[l] = angle_CD2mean[l,2];
	}
	else{
		angle_CIi[l] = 1.96*angle_CD2sd[l,2]/sqrt(angle_Hc[l]);
		angle_CIs[l] = 1.96*angle_CD2sd[l,2]/sqrt(angle_Hc[l]);
	}
}

CD2 <- matrix(0, nrow = 16384, ncol = 2) 
CD2[,1] <- CDCC[,5]
CD2[,2] <- CDCC[,4]
H = hist(CD2[,1],100);
Hc = H$counts
CD2mean <- matrix(0, nrow = length(Hc), ncol = 2)
CD2sd <- matrix(0, nrow = length(Hc), ncol = 2)
CIi <- rep(0, length(Hc))
CIs <- rep(0, length(Hc))
count <- 0
CD2mean[,1] <- H$mids
CD2sd[,1] <- H$mids

for (l in seq(from=1, to=length(Hc), by=1)){
    if (Hc[l]==0){
    CD2mean[l,2] = 0 
    CD2sd[l,2] = 0  
    }
    else{
    CD2mean[l,2] = sum(CD2[(count+1):(count+Hc[l]),2])/Hc[l]  
        for (i in seq(from=count+1, to=count+Hc[l], by=1)){
            CD2sd[l,2] = (CD2[i,2]-CD2mean[l,2])^2+CD2sd[l,2]
        }
	CD2sd[l,2] = sqrt(CD2sd[l,2]/(Hc[l]))	
    count <- count + Hc[l]  
    }
}

for (l in seq(from=1, to=length(Hc), by=1)){
	if (Hc[l]==0){
		CIs[l] = 0;
		CIi[l] = 0;
	}
	else if(CD2mean[l,2] < 1.96*CD2sd[l,2]/sqrt(Hc[l])){
		CIs[l] = 1.96*CD2sd[l,2]/sqrt(Hc[l]);
		CIi[l] = CD2mean[l,2];
	}
	else{
		CIi[l] = 1.96*CD2sd[l,2]/sqrt(Hc[l]);
		CIs[l] = 1.96*CD2sd[l,2]/sqrt(Hc[l]);
	}
}




#angle to distance


if (m==5){

perimeter = ((dmin+dmax)/2*pi*2)/4
angle_CD2mean[,1]=angle_CD2mean[,1]/90*perimeter
angle_CD2mean[,1]=angle_CD2mean[,1]+(4.712-perimeter)/2

ymin <- 0
bitmap(paste0(CELL_TYPE, k, "B", sep=".", "png"), res=300)
par(mar=c(10, 9.5, 4.1, 2.1), mgp=c(5.5, 2, 0))
#plot(angle_CD2mean[,1], angle_CD2mean[,2], las=0, type='l', axes = TRUE, xlim = c(0, perimeter), ylim = c(ymin,yymaxB), xlab = "Azimulthal direction," ~ mm, ylab = "Density," ~ mm^{-2}, main = paste0(CELL_TYPE), lwd = 3, col = 'black', cex.lab=2, cex.axis=1.6, cex.main=2, cex.sub=1.8)
plot(angle_CD2mean[,1], angle_CD2mean[,2], las=0, xaxt="n", type='l', axes = TRUE, xlim = c(0, 4.7), ylim = c(min(angle_CD2mean[,2]-angle_CIi[]),max(angle_CD2mean[,2]+angle_CIs[])), xlab = '', ylab = "Density," ~ mm^{-2}, main = paste0(CELL_TYPE), lwd = 2.5, col = 'black', cex.lab=2.8, cex.axis=2.5, cex.main=2.8, cex.sub=2.5)
polygon(c(angle_CD2mean[,1],rev(angle_CD2mean[,1])),c(angle_CD2mean[,2]-angle_CIi[],rev(angle_CD2mean[,2])),col="grey", border ='grey')
polygon(c(angle_CD2mean[,1],rev(angle_CD2mean[,1])),c(angle_CD2mean[,2],rev(angle_CD2mean[,2]+angle_CIs[])),col="grey", border ='grey')
lines(angle_CD2mean[,1], angle_CD2mean[,2], lwd = 3)
#text(0.25, 3850, label=expression(bold(D)), cex = 4, font=2)
text(0.2, 1740, label=expression(bold(D)), cex = 4, font=2)


grid(nx = NULL, ny = NULL, col = "lightgray", lty = "solid",
     lwd = par("lwd"), equilogs = TRUE)

ymin <- 0
bitmap(paste0(CELL_TYPE, k, sep=".", "png"), res=300)
par(mar=c(10, 9.5, 4.1, 2.1), mgp=c(5.5, 2, 0))
#plot(CD2mean[,1], CD2mean[,2], las=0, type='l', axes = TRUE, xlim = c(0.5, 4), ylim = c(ymin,yymax), xlab = "Radial direction," ~ mm, ylab = "Density," ~ mm^{-2}, main = paste0(CELL_TYPE), lwd = 3, col = 'black', cex.lab=2, cex.axis=1.6, cex.main=2, cex.sub=1.8)
plot(CD2mean[,1], CD2mean[,2], las=0, xaxt="n", type='l', axes = TRUE, xlim = c(x1r,x2r), ylim = c(ymin,yymax), xlab = '', ylab = "Density," ~ mm^{-2}, main = paste0(CELL_TYPE), lwd = 2.5, col = 'black', cex.lab=2.8, cex.axis=2.5, cex.main=2.8, cex.sub=2.5)
polygon(c(CD2mean[,1],rev(CD2mean[,1])),c(CD2mean[,2]-CIi[],rev(CD2mean[,2])),col="grey", border ='grey')
polygon(c(CD2mean[,1],rev(CD2mean[,1])),c(CD2mean[,2],rev(CD2mean[,2]+CIs[])),col="grey", border ='grey')
lines(CD2mean[,1], CD2mean[,2], lwd = 3)
text(1, 2370, label=expression(bold(C)), cex = 4, font=2)

days <- c(1:360)
##text(-1, 2000, "DAY", cex=2)
##par(op)


grid(nx = NULL, ny = NULL, col = "lightgray", lty = "solid",
     lwd = par("lwd"), equilogs = TRUE)

segments(dmin, ymin, x1 = dmin, y1 = yymax,
        col = "red", lty = "dashed", lwd = 2.5) 
segments(dmax, ymin, x1 = dmax, y1 = yymax,
         col = "red", lty = "dashed", lwd = 2.5)          
segments((dmin+(dmax-dmin)/4), ymin, x1 = (dmin+(dmax-dmin)/4), y1 = yymax,
         col = "blue", lty = "dashed", lwd = 2.5)
segments((dmin+(dmax-dmin)*3/4), ymin, x1 = (dmin+(dmax-dmin)*3/4), y1 = yymax,
         col = "blue", lty = "dashed", lwd = 2.5)  
}

else if (m==9){

perimeter = ((dmin+dmax)/2*pi*2)/4
angle_CD2mean[,1]=angle_CD2mean[,1]/90*perimeter
angle_CD2mean[,1]=angle_CD2mean[,1]+(4.712-perimeter)/2

ymin <- 0
bitmap(paste0(CELL_TYPE, k, "B", sep=".", "png"), res=300)
par(mar=c(10, 9.5, 4.1, 2.1), mgp=c(5.5, 2, 0))
#plot(angle_CD2mean[,1], angle_CD2mean[,2], las=0, type='l', axes = TRUE, xlim = c(0, perimeter), ylim = c(ymin,yymaxB), xlab = "Azimulthal direction," ~ mm, ylab = "Density," ~ mm^{-2}, main = paste0(CELL_TYPE), lwd = 3, col = 'black', cex.lab=2, cex.axis=1.6, cex.main=2, cex.sub=1.8)
plot(angle_CD2mean[,1], angle_CD2mean[,2], las=0, xaxt="n", type='l', axes = TRUE, xlim = c(0, 4.7), ylim = c(min(angle_CD2mean[,2]),max(angle_CD2mean[,2])), xlab = '', ylab = '', main = paste0(CELL_TYPE), lwd = 2.5, col = 'black', cex.lab=2.8, cex.axis=2.5, cex.main=2.8, cex.sub=2.5)
polygon(c(angle_CD2mean[,1],rev(angle_CD2mean[,1])),c(angle_CD2mean[,2]-angle_CIi[],rev(angle_CD2mean[,2])),col="grey", border ='grey')
polygon(c(angle_CD2mean[,1],rev(angle_CD2mean[,1])),c(angle_CD2mean[,2],rev(angle_CD2mean[,2]+angle_CIs[])),col="grey", border ='grey')
lines(angle_CD2mean[,1], angle_CD2mean[,2], lwd = 3)
#text(0.25, 3850, label=expression(bold(D)), cex = 4, font=2)


grid(nx = NULL, ny = NULL, col = "lightgray", lty = "solid",
     lwd = par("lwd"), equilogs = TRUE)

ymin <- 0
bitmap(paste0(CELL_TYPE, k, sep=".", "png"), res=300)
par(mar=c(10, 9.5, 4.1, 2.1), mgp=c(5.5, 2, 0))
#plot(CD2mean[,1], CD2mean[,2], las=0, type='l', axes = TRUE, xlim = c(0.5, 4), ylim = c(ymin,yymax), xlab = "Radial direction," ~ mm, ylab = "Density," ~ mm^{-2}, main = paste0(CELL_TYPE), lwd = 3, col = 'black', cex.lab=2, cex.axis=1.6, cex.main=2, cex.sub=1.8)
plot(CD2mean[,1], CD2mean[,2],las=0, xaxt="n", type='l', axes = TRUE, xlim = c(x1r,x2r), ylim = c(ymin,yymax), xlab = '', ylab = '', main = paste0(CELL_TYPE), lwd = 2.5, col = 'black', cex.lab=2.8, cex.axis=2.5, cex.main=2.8, cex.sub=2.5)
polygon(c(CD2mean[,1],rev(CD2mean[,1])),c(CD2mean[,2]-CIi[],rev(CD2mean[,2])),col="grey", border ='grey')
polygon(c(CD2mean[,1],rev(CD2mean[,1])),c(CD2mean[,2],rev(CD2mean[,2]+CIs[])),col="grey", border ='grey')
lines(CD2mean[,1], CD2mean[,2], lwd = 3)
#text(0.7, 5800, label=expression(bold(C)), cex = 4, font=2)

days <- c(1:360)
##text(-1, 2000, "DAY", cex=2)
##par(op)

grid(nx = NULL, ny = NULL, col = "lightgray", lty = "solid",
     lwd = par("lwd"), equilogs = TRUE)

segments(dmin, ymin, x1 = dmin, y1 = yymax,
        col = "red", lty = "dashed", lwd = 2.5) 
segments(dmax, ymin, x1 = dmax, y1 = yymax,
         col = "red", lty = "dashed", lwd = 2.5)          
segments((dmin+(dmax-dmin)/4), ymin, x1 = (dmin+(dmax-dmin)/4), y1 = yymax,
         col = "blue", lty = "dashed", lwd = 2.5)
segments((dmin+(dmax-dmin)*3/4), ymin, x1 = (dmin+(dmax-dmin)*3/4), y1 = yymax,
         col = "blue", lty = "dashed", lwd = 2.5)  

}

else{

dist = CD2mean[,1]
cconc = CD2mean[,2]

#CIi[]=CIi[]/45000
#CIs[]=CIs[]/45000
#CD2mean[,2]=CD2mean[,2]/45000
#CV=CD2mean[,2]

Ps=0.022
rs=0.1
rp=0.005
Ds=(voxel_size*111*Ps)^2*4/6
Lc=sqrt(Ds/rp)
Dens=dist/Lc*exp(-dist/Lc)*750

ymin <- 0
bitmap(paste0(CELL_TYPE, k, sep=".", "png"), res=300)
par(mar=c(10, 9.5, 4.1, 2.1), mgp=c(5.5, 2, 0))
#plot(CD2mean[,1], CD2mean[,2], las=0, type='l', axes = TRUE, xlim = c(0.5, 4), ylim = c(ymin,yymax), xlab = "Radial direction," ~ mm, ylab = "Density," ~ mm^{-2}, main = paste0(CELL_TYPE), lwd = 3, col = 'black', cex.lab=2, cex.axis=1.6, cex.main=2, cex.sub=1.8)
plot(CD2mean[,1], CD2mean[,2], las=0, xaxt="n", type='l', axes = TRUE, xlim = c(x1r, x2r), ylim = c(0,50000), xlab = '', ylab = '', main = '', lwd = 2.5, col = 'black', cex.lab=2.8, cex.axis=2.5, cex.main=2.8, cex.sub=2.5)
polygon(c(CD2mean[,1],rev(CD2mean[,1])),c(CD2mean[,2]-CIi[],rev(CD2mean[,2])),col="grey", border ='grey')
polygon(c(CD2mean[,1],rev(CD2mean[,1])),c(CD2mean[,2],rev(CD2mean[,2]+CIs[])),col="grey", border ='grey')
lines(CD2mean[,1], CD2mean[,2], lwd = 3, col = c('black'))
#text(0.7, 5800, label=expression(bold(C)), cex = 4, font=2)

days <- c(1:360)
##text(-1, 2000, "DAY", cex=2)
##par(op)

grid(nx = NULL, ny = NULL, col = "lightgray", lty = "solid",
     lwd = par("lwd"), equilogs = TRUE)

segments(dmin, ymin, x1 = dmin, y1 = yymax,
        col = "red", lty = "dashed", lwd = 2.5) 
segments(dmax, ymin, x1 = dmax, y1 = yymax,
         col = "red", lty = "dashed", lwd = 2.5)          
segments((dmin+(dmax-dmin)/4), ymin, x1 = (dmin+(dmax-dmin)/4), y1 = yymax,
         col = "blue", lty = "dashed", lwd = 2.5)
segments((dmin+(dmax-dmin)*3/4), ymin, x1 = (dmin+(dmax-dmin)*3/4), y1 = yymax,
         col = "blue", lty = "dashed", lwd = 2.5)  

}

### 2d plots (top) ###

##

}

 
IFx = CDCC[CDCC[,3] < 5000 & CDCC[,3] > 1,1]
IFy = CDCC[CDCC[,3] < 5000 & CDCC[,3] > 1,2]
IFF = data.frame(IFx,IFy)
ggplot(IFF, aes(x=IFx, y=IFy)) + geom_point() +
  labs(
    title = "Invasive front",
    x = 'x,'~mm,
    y = 'y,'~mm
  ) +
  xlim(0, 4) + ylim(0, 4)
ggsave(paste0("IF", k, sep=".", "png"))

}

CMass <- data.frame(CM)
CMass_var <- data.frame(CM_VAR)

write.csv(CMass,paste0("CMass.csv"), row.names = FALSE)
write.csv(CMass_var,paste0("CMass_var.csv"), row.names = FALSE)

tt <- rep(0, (k-1)/64+1)
for (i in seq(from=1, to=(k-1)/64+1, by=1)){
	tt[i] = i
}

bitmap("CMx.png", res=300)
plot(tt,CM[1:length(tt),1],las=0, type='l', axes = TRUE, xlim = c(1,length(tt)),ylim = c(ymin,ymax), lwd = 3, col = 'black')
polygon(c(tt,rev(tt)),c(CM[1:length(tt),1]-CM_VAR[1:length(tt),1],rev(CM[1:length(tt),1])),col="grey", border ='grey')
polygon(c(tt,rev(tt)),c(CM[1:length(tt),1],rev(CM[1:length(tt),1]+CM_VAR[1:length(tt),1])),col="grey", border ='grey')
lines(tt, CM[1:length(tt),1], lwd = 3)
bitmap("CMx2.png", res=300)








